{"version":3,"sources":["webpack:///../src/proactive_controls/c3_secure_database_access.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,sOAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,qBAAG,kBAAIC,WAAW,KAAf,mCAAuD,mBAAGA,WAAW,MAAS,CAC3E,KAAQ,oEAD4C,mBAG1D,iBAAQ,CACN,GAAM,6BADR,8BAGA,iBAAQ,CACN,GAAM,eADR,eAGA,mKAEA,iBAAQ,CACN,GAAM,kBADR,kBAGA,mgBAMA,uUAIA,iBAAQ,CACN,GAAM,4FADR,4FAGA,ytBASA,iBAAQ,CACN,GAAM,qCADR,qCAGA,ynBAOA,iBAAQ,CACN,GAAM,kBADR,kBAGA,iBAAQ,CACN,GAAM,wBADR,wBAGA,oXAIA,iBAAQ,CACN,GAAM,yBADR,yBAGA,uRAGA,iBAAQ,CACN,GAAM,wBADR,wBAGA,uSAIA,iBAAQ,CACN,GAAM,wBADR,wBAGA,iBAAQ,CACN,GAAM,0CADR,0CAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+BADQ,uBAItB,iBAAQ,CACN,GAAM,iDADR,iDAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sFADQ,uC,oOAQ1BJ,EAAWK,gBAAiB","file":"component---src-proactive-controls-c-3-secure-database-access-mdx-53db545ab8d29bde88f1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ulisesgascon/Desktop/WORKSPACE/GS-Projects/cybersecurity-handbook/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><em parentName=\"p\">{`ℹ️ This section will be part of `}<a parentName=\"em\" {...{\n          \"href\": \"https://github.com/guidesmiths/cybersecurity-handbook/issues/41\"\n        }}>{`1.0.0 Release`}</a></em></p>\n    <h1 {...{\n      \"id\": \"c3-secure-database-access\"\n    }}>{`C3: Secure Database Access`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`This section describes secure access to all data stores, including both relational databases and\nNoSQL databases. Some areas to consider:`}</p>\n    <h3 {...{\n      \"id\": \"secure-queries\"\n    }}>{`Secure Queries`}</h3>\n    <p>{`SQL Injection occurs when untrusted user input is dynamically added to a SQL query in an\ninsecure manner, often via basic string concatenation. SQL Injection is one of the most\ndangerous application security risks. SQL Injection is easy to exploit and could lead to the\nentire database being stolen, wiped, or modified. The application can even be used to run\ndangerous commands against the operating system hosting your database, thereby giving an\nattacker a foothold on your network.`}</p>\n    <p>{`In order to mitigate SQL injection, untrusted input should be prevented from being\ninterpreted as part of a SQL command. The best way to do this is with the programming\ntechnique known as ‘Query Parameterization’. This defense should be applied to SQL, OQL, as\nwell as stored procedure construction.`}</p>\n    <h3 {...{\n      \"id\": \"sql-injection-occurs-when-untrusted-user-input-is-dynamically-added-to-a-sql-query-in-an\"\n    }}>{`SQL Injection occurs when untrusted user input is dynamically added to a SQL query in an`}</h3>\n    <p>{`insecure manner, often via basic string concatenation. SQL Injection is one of the most\ndangerous application security risks. SQL Injection is easy to exploit and could lead to the\nentire database being stolen, wiped, or modified. The application can even be used to run\ndangerous commands against the operating system hosting your database, thereby giving an\nattacker a foothold on your network.\nIn order to mitigate SQL injection, untrusted input should be prevented from being\ninterpreted as part of a SQL command. The best way to do this is with the programming\ntechnique known as ‘Query Parameterization’. This defense should be applied to SQL, OQL, as\nwell as stored procedure construction.`}</p>\n    <h3 {...{\n      \"id\": \"caution-on-query-parameterization\"\n    }}>{`Caution on Query Parameterization`}</h3>\n    <p>{`Certain locations in a database query are not parameterizable. These locations are different\nfor each database vendor. Be certain to do very careful exact-match validation or manual\nescaping when confronting database query parameters that cannot be bound to a\nparameterized query. Also, while the use of parameterized queries largely has a positive\nimpact on performance, certain parameterized queries in specific database implementations\nwill affect performance negatively. Be sure to test queries for performance; especially\ncomplex queries with extensive like clause or text searching capabilities. `}</p>\n    <h2 {...{\n      \"id\": \"implementation\"\n    }}>{`Implementation`}</h2>\n    <h3 {...{\n      \"id\": \"secure-configuration\"\n    }}>{`Secure Configuration`}</h3>\n    <p>{`Unfortunately, database management systems do not always ship in a “secure by default”\nconfiguration. Care must be taken to ensure that the security controls available from the\nDatabase Management System (DBMS) and hosting platform are enabled and properly\nconfigured. There are standards, guides, and benchmarks available for most common DBMS.`}</p>\n    <h3 {...{\n      \"id\": \"secure-authentication\"\n    }}>{`Secure Authentication`}</h3>\n    <p>{`All access to the database should be properly authenticated. Authentication to the DBMS\nshould be accomplished in a secure manner. Authentication should take place only over a\nsecure channel. Credentials must be properly secured and available for use. `}</p>\n    <h3 {...{\n      \"id\": \"secure-communication\"\n    }}>{`Secure Communication`}</h3>\n    <p>{`Most DBMS support a variety of communications methods (services, APIs, etc) - secure\n(authenticated, encrypted) and insecure (unauthenticated or unencrypted). It is a good\npractice to only use the secure communications options per the Protect Data Everywhere\ncontrol.`}</p>\n    <h2 {...{\n      \"id\": \"specific-mitigations\"\n    }}>{`Specific Mitigations`}</h2>\n    <h3 {...{\n      \"id\": \"owasp-top-10-vulnerabilities-mitigated\"\n    }}>{`OWASP Top 10 Vulnerabilities Mitigated`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/./docs/owasp/a1_injection\"\n        }}>{`A1:2017-Injection`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"owasp-mobile-top-10-vulnerabilities-mitigated\"\n    }}>{`OWASP Mobile Top 10 Vulnerabilities Mitigated`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://owasp.org/www-project-mobile-top-10/2016-risks/m1-improper-platform-usage\"\n        }}>{`M1: Improper Platform Usage`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}