{"version":3,"sources":["webpack:///../src/proactive_controls/c4_encode_and_escape_data.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,sOAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,qBAAG,kBAAIC,WAAW,KAAf,mCAAuD,mBAAGA,WAAW,MAAS,CAC3E,KAAQ,oEAD4C,mBAG1D,iBAAQ,CACN,GAAM,6BADR,8BAGA,iBAAQ,CACN,GAAM,eADR,eAGA,wGAAuF,sBAAQA,WAAW,KAAnB,YAAvF,8MAGsB,0BAAYA,WAAW,KAAvB,KAHtB,uBAG2F,0BAAYA,WAAW,KAAvB,QAH3F,8BAG0K,sBAAQA,WAAW,KAAnB,aAH1K,wIAKoC,0BAAYA,WAAW,KAAvB,MALpC,uBAK0G,0BAAYA,WAAW,KAAvB,KAL1G,6FAOA,wDAAuC,sBAAQA,WAAW,KAAnB,eAAvC,ybAMA,iBAAQ,CACN,GAAM,kBADR,kBAGA,iBAAQ,CACN,GAAM,8BADR,8BAGA,yjBAOA,iBAAQ,CACN,GAAM,iDADR,iDAGA,0nBAOA,iBAAQ,CACN,GAAM,2CADR,2CAGA,4JACyC,mBAAGA,WAAW,KAAQ,CAC3D,KAAQ,qDAD6B,WADzC,iEAIkB,mBAAGA,WAAW,KAAQ,CACpC,KAAQ,wCADM,YAJlB,scAYA,iBAAQ,CACN,GAAM,wBADR,wBAGA,iBAAQ,CACN,GAAM,0CADR,0CAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+CADQ,sBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8DADQ,wCAItB,iBAAQ,CACN,GAAM,iDADR,iDAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kFADQ,mC,oOAQ1BJ,EAAWK,gBAAiB","file":"component---src-proactive-controls-c-4-encode-and-escape-data-mdx-8bf40d1d8af61b155a76.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ulisesgascon/Desktop/WORKSPACE/GS-Projects/cybersecurity-handbook/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><em parentName=\"p\">{`ℹ️ This section will be part of `}<a parentName=\"em\" {...{\n          \"href\": \"https://github.com/guidesmiths/cybersecurity-handbook/issues/41\"\n        }}>{`1.0.0 Release`}</a></em></p>\n    <h1 {...{\n      \"id\": \"c4-encode-and-escape-data\"\n    }}>{`C4: Encode and Escape Data`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`Encoding and escaping are defensive techniques meant to stop injection attacks. `}<strong parentName=\"p\">{`Encoding`}</strong>{`\n(commonly called \"Output Encoding\") involves translating special characters into some\ndifferent but equivalent form that is no longer dangerous in the target interpreter, for\nexample translating the `}<inlineCode parentName=\"p\">{`<`}</inlineCode>{` character into the `}<inlineCode parentName=\"p\">{`&lt;`}</inlineCode>{` string when writing to an `}<strong parentName=\"p\">{`HTML page`}</strong>{`.\nEscaping involves adding a special character before the character/string to avoid it being\nmisinterpreted, for example, adding a `}<inlineCode parentName=\"p\">{`\\\\`}</inlineCode>{` character before a `}<inlineCode parentName=\"p\">{`\"`}</inlineCode>{` (double quote) character so\nthat it is interpreted as text and not as closing a string.`}</p>\n    <p>{`Output encoding is best applied `}<strong parentName=\"p\">{`just before`}</strong>{` the content is passed to the target interpreter. If\nthis defense is performed too early in the processing of a request then the encoding or\nescaping may interfere with the use of the content in other parts of the program. For\nexample if you HTML escape content before storing that data in the database and the UI\nautomatically escapes that data a second time then the content will not display properly due\nto being double escaped. `}</p>\n    <h2 {...{\n      \"id\": \"implementation\"\n    }}>{`Implementation`}</h2>\n    <h3 {...{\n      \"id\": \"contextual-output-encoding\"\n    }}>{`Contextual Output Encoding`}</h3>\n    <p>{`Contextual output encoding is a crucial security programming technique needed to stop XSS.\nThis defense is performed on output, when you’re building a user interface, at the last\nmoment before untrusted data is dynamically added to HTML. The type of encoding will\ndepend on the location (or context) in the document where data is being displayed or stored.\nThe different types of encoding that would be used for building secure user interfaces\nincludes HTML Entity Encoding, HTML Attribute Encoding, JavaScript Encoding, and URL\nEncoding.`}</p>\n    <h3 {...{\n      \"id\": \"other-types-of-encoding-and-injection-defense\"\n    }}>{`Other Types of Encoding and Injection Defense`}</h3>\n    <p>{`Encoding/Escaping can be used to neutralize content against other forms of injection. For\nexample, it's possible to neutralize certain special meta-characters when adding input to an\noperating system command. This is called \"OS command escaping\", \"shell escaping\", or\nsimilar. This defense can be used to stop \"Command Injection\" vulnerabilities.\nThere are other forms of escaping that can be used to stop injection such as XML attribute\nescaping stopping various forms of XML and XML path injection, as well as LDAP distinguished\nname escaping that can be used to stop various forms of LDAP injection.`}</p>\n    <h3 {...{\n      \"id\": \"character-encoding-and-canonicalization\"\n    }}>{`Character Encoding and Canonicalization`}</h3>\n    <p>{`Unicode Encoding is a method for storing characters with multiple bytes. Wherever input\ndata is allowed, data can be entered using `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.owasp.org/index.php/Unicode_Encoding\"\n      }}>{`Unicode`}</a>{` to disguise malicious code and permit a\nvariety of attacks. `}<a parentName=\"p\" {...{\n        \"href\": \"https://tools.ietf.org/html/rfc2279\"\n      }}>{`RFC 2279`}</a>{` references many ways that text can be encoded.\nCanonicalization is a method in which systems convert data into a simple or standard form.\nWeb applications commonly use character canonicalization to ensure all content is of the\nsame character type when stored or displayed.\nTo be secure against canonicalization related attacks means an application should be safe\nwhen malformed Unicode and other malformed character representations are entered.`}</p>\n    <h2 {...{\n      \"id\": \"specific-mitigations\"\n    }}>{`Specific Mitigations`}</h2>\n    <h3 {...{\n      \"id\": \"owasp-top-10-vulnerabilities-mitigated\"\n    }}>{`OWASP Top 10 Vulnerabilities Mitigated`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/cybersecurity-handbook/owasp/a1_injection\"\n        }}>{`A1:2017-Injection`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/cybersecurity-handbook/owasp/a7_cross-site_scripting_xss\"\n        }}>{`A7:2017-Cross-Site Scripting (XSS)`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"owasp-mobile-top-10-vulnerabilities-mitigated\"\n    }}>{`OWASP Mobile Top 10 Vulnerabilities Mitigated`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://owasp.org/www-project-mobile-top-10/2016-risks/m7-client-code-quality\"\n        }}>{`M7: Client Code Quality`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}