{"version":3,"sources":["webpack:///../src/http_headers/content_security_policy.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-http-headers-content-security-policy-mdx-a6173890ce9f925adc3f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ulisesgascon/Desktop/WORKSPACE/GS-Projects/cybersecurity-handbook/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"http-header-content-security-policy\"\n    }}>{`HTTP Header: Content Security Policy`}</h1>\n    <h2 {...{\n      \"id\": \"the-attack\"\n    }}>{`The attack`}</h2>\n    <p>{`There isn’t one specific attack that the CSP module prevents. The main thing is this: you don’t want anyone putting anything on your webpages that you don’t expect.`}</p>\n    <p>{`The nastiest attack is probably cross-site scripting (XSS), which is when a hacker puts malicious JavaScript onto your page. If I can run JavaScript on your page, I can do a lot of bad things, from stealing authentication cookies to logging every user action.`}</p>\n    <p>{`There are other things attackers can do, even if they can’t execute JavaScript. For example, if I could put a tiny, transparent 1x1 image on your site, I could get a pretty good idea of how much traffic your site gets. If I could get a `}<a parentName=\"p\" {...{\n        \"href\": \"http://arstechnica.com/security/2015/07/two-new-flash-exploits-surface-from-hacking-team-combine-with-java-0-day/\"\n      }}>{`vulnerable browser plugin`}</a>{` like Flash to run, I could exploit its flaws and do things you don’t want!`}</p>\n    <p>{`One of the tricky things about these injection attacks is that the browser doesn’t know what’s good and what’s bad. How can it tell the difference between a legitimate JavaScript file and a malicious one? In many cases, it can’t…unless you’ve defined a Content Security Policy.`}</p>\n    <p>{`Most modern browsers support a header called `}<inlineCode parentName=\"p\">{`Content-Security-Policy`}</inlineCode>{`, which is effectively a whitelist of things that are allowed to be on your page. You can whitelist JavaScript, CSS, images, plugins, and much more. Things are opt-in, so you’re saying “this stuff is allowed” instead of “this stuff is not allowed”.`}</p>\n    <h2 {...{\n      \"id\": \"the-header\"\n    }}>{`The header`}</h2>\n    <p>{`Let’s say you’ve got a website that links to no external resources at all—just your stuff. You could set a header that looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Content-Security-Policy: default-src 'self'\n`}</code></pre>\n    <p>{`This effectively tells the browser “only load things that are from my own domain”. If you’re running example.com and a user tries to load `}<inlineCode parentName=\"p\">{`https://example.com/my-javascript.js`}</inlineCode>{`, it’ll work just fine. But if a user tries to load `}<inlineCode parentName=\"p\">{`http://evil.com/evil.js`}</inlineCode>{`, it won’t load at all!`}</p>\n    <p>{`Now, let’s say you want to also allow CSS from Bootstrap’s CDN. You could set a CSP that looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Content-Security-Policy: default-src 'self'; style-src 'self' maxcdn.bootstrapcdn.com\n`}</code></pre>\n    <p>{`Now we’ve whitelisted `}<inlineCode parentName=\"p\">{`'self'`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`maxcdn.bootstrapcdn.com`}</inlineCode>{`. The user will be able to load CSS from there, but nothing else. The user won’t even be able to load JavaScript or images from that URL, either—only stylesheets.`}</p>\n    <p>{`As an example here is the CSP used by Github:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`default-src 'none'; \nbase-uri 'self'; \nblock-all-mixed-content; \nconnect-src 'self' uploads.github.com www.githubstatus.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com wss://live.github.com;\nfont-src github.githubassets.com; \nform-action 'self' github.com gist.github.com;\nframe-ancestors 'none';\nframe-src render.githubusercontent.com;\nimg-src 'self' data: github.githubassets.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com customer-stories-feed.github.com; \nmanifest-src 'self'; \nmedia-src 'none'; script-src github.githubassets.com; \nstyle-src 'unsafe-inline' github.githubassets.com\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-code\"\n    }}>{`The code`}</h2>\n    <p>{`Helmet’s csp module helps set Content Security Policies.`}</p>\n    <p>{`Directives can be kebab-cased (like `}<inlineCode parentName=\"p\">{`script-src`}</inlineCode>{`) or camel-cased (like `}<inlineCode parentName=\"p\">{`scriptSrc`}</inlineCode>{`); they are equivalent.`}</p>\n    <h4 {...{\n      \"id\": \"directives\"\n    }}>{`Directives`}</h4>\n    <p>{`There are a lot of inconsistencies in how browsers implement CSP. Helmet looks at the user-agent of the browser and sets the appropriate header and value for that browser. If no user-agent is matched, it will set all the headers with the 2.0 spec.`}</p>\n    <p>{`Check out the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/helmetjs/csp#supported-directives\"\n      }}>{`supported directives`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy({\n  directives: {\n    defaultSrc: [\"'self'\", 'default.com'],\n    scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n    sandbox: ['allow-forms', 'allow-scripts'],\n    reportUri: '/report-violation',\n    objectSrc: [\"'none'\"],\n    //...\n    upgradeInsecureRequests: true,\n    workerSrc: false\n  }\n}))\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"csp-violations\"\n    }}>{`CSP violations`}</h4>\n    <p>{`If you’ve specified a reportUri, browsers will POST any CSP violations to your server.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy({\n  directives: {\n    reportUri: '/report-violation',\n    //...\n  }\n}))\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"report-only-mode\"\n    }}>{`Report Only mode`}</h3>\n    <p>{`This module’s reportOnly option will switch the header to Content-Security-Policy-Report-Only. This instructs browsers to report violations to the reportUri (if specified) but it will not block any resources from loading.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy(csp({\n  directives: {\n    // ...\n  },\n  reportOnly: true\n})\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"set-all-headers\"\n    }}>{`set all headers`}</h4>\n    <p>{`To set all headers, including legacy ones, set the `}<inlineCode parentName=\"p\">{`setAllHeaders`}</inlineCode>{` option to true. Note that this will change the value of the headers based on `}<inlineCode parentName=\"p\">{`User-Agent`}</inlineCode>{`. You can disable this by using the `}<inlineCode parentName=\"p\">{`browserSniff: false`}</inlineCode>{` option above.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy(csp({\n  directives: {\n    // ...\n  },\n  setAllHeaders: true\n})\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"loose-mode\"\n    }}>{`loose mode`}</h4>\n    <p>{`This module will detect common mistakes in your directives and throw errors if it finds any. To disable this, enable \"loose mode\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy(csp({\n  directives: {\n    // ...\n  },\n  loose: false\n})\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"disable-for-android\"\n    }}>{`Disable for Android`}</h4>\n    <p>{`Old Android browsers can be very buggy. This is false by default.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy(csp({\n  directives: {\n    // ...\n  },\n  disableAndroid: true\n})\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"browser-sniffing\"\n    }}>{`Browser sniffing`}</h4>\n    <p>{`By default, this module will look at the incoming `}<inlineCode parentName=\"p\">{`User-Agent`}</inlineCode>{` header and send different headers depending on the detected browser. For example, Chrome prior to version 25 uses an alternate header called `}<inlineCode parentName=\"p\">{`X-WebKit-CSP`}</inlineCode>{`, and this module handles that. If no browser is detected, this module will set all the headers with the 2.0 spec.`}</p>\n    <p>{`To disable this browser sniffing and assume a modern browser, set the `}<inlineCode parentName=\"p\">{`browserSniff`}</inlineCode>{` option to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy(csp({\n  directives: {\n    // ...\n  },\n  browserSniff: false\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"advance-csp\"\n    }}>{`Advance CSP`}</h2>\n    <h3 {...{\n      \"id\": \"generating-nounces\"\n    }}>{`Generating Nounces`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const uuidv4 = require('uuid/v4')\n\napp.use(function (req, res, next) {\n  res.locals.nonce = uuidv4()\n  next()\n})\n\napp.use(csp({\n  directives: {\n    scriptSrc: [\n      \"'self'\",\n      (req, res) => \\`'nonce-\\${res.locals.nonce}'\\`  // 'nonce-614d9122-d5b0-4760-aecf-3a5d17cf0ac9'\n    ]\n  }\n}))\n\napp.use(function (req, res) {\n  res.end(\\`<script nonce=\"\\${res.locals.nonce}\">alert(1 + 1);</script>\\`)\n})\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"debugging-mode\"\n    }}>{`Debugging mode`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`app.use(csp({\n  directives: {\n    // ...\n  },\n  reportOnly: (req, res) => req.query.cspmode === 'debug'\n})\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"refs\"\n    }}>{`Refs:`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://helmetjs.github.io/docs/csp\"\n        }}>{`Helmet | Content Security Policy`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developers.google.com/web/fundamentals/security/csp\"\n        }}>{`Google developers | Content Security Policy`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Cross-site_scripting\"\n        }}>{`Wikipedia | Cross-site scripting`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://caniuse.com/#feat=contentsecuritypolicy\"\n        }}>{`Can I use | Content Security Policy 1.0`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://caniuse.com/#feat=contentsecuritypolicy2\"\n        }}>{`Can I use | Content Security Policy 2.0`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://content-security-policy.com/\"\n        }}>{`Content Security Policy Reference`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://content-security-policy.com/browser-test/\"\n        }}>{`Content Security Policy Browser Test`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=d0D3d0ZM-rI\"\n        }}>{`📺 dotSecurity 2016 | Scott Helme | Content Security Policy: The application security Swiss Army Knife`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=mr230uotw-Y\"\n        }}>{`📺 GOTO 2018 | Matt Brunt | Content Security Policies: Let's Break Stuff`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}