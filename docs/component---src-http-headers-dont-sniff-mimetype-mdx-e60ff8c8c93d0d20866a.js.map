{"version":3,"sources":["webpack:///../src/http_headers/dont_sniff_mimetype.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,0NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mCADR,qCAGA,iBAAQ,CACN,GAAM,cADR,cAGA,0HAAyG,0BAAYC,WAAW,KAAvB,aAAzG,oBAAmL,0BAAYA,WAAW,KAAvB,oBAAnL,oCAAoR,0BAAYA,WAAW,KAAvB,mBAApR,2DAA2Y,0BAAYA,WAAW,KAAvB,gBAA3Y,2CACA,+DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iEAIL,0CAAyB,0BAAYA,WAAW,KAAvB,iBAAzB,SAA4F,0BAAYA,WAAW,KAAvB,eAA5F,QAA4J,0BAAYA,WAAW,KAAvB,eAA5J,YAAgO,0BAAYA,WAAW,KAAvB,gBAAhO,cAAuS,0BAAYA,WAAW,KAAvB,mBAAvS,+CAAkZ,0BAAYA,WAAW,KAAvB,iBAAlZ,mBACA,oCAAmB,0BAAYA,WAAW,KAAvB,iBAAnB,2BAAwG,0BAAYA,WAAW,KAAvB,gBAAxG,OAAwK,0BAAYA,WAAW,KAAvB,aAAxK,4NAA0b,0BAAYA,WAAW,KAAvB,gBAA1b,2CACA,0GAAyF,0BAAYA,WAAW,KAAvB,QAAzF,2MAAqV,mBAAGA,WAAW,KAAQ,CACvW,KAAQ,oEADyU,iBAArV,4EAGA,iBAAQ,CACN,GAAM,cADR,cAGA,4BAAW,0BAAYA,WAAW,KAAvB,0BAAX,8EAA4J,0BAAYA,WAAW,KAAvB,WAA5J,mHACA,iBAAQ,CACN,GAAM,YADR,YAGA,4BAAW,0BAAYA,WAAW,KAAvB,WAAX,4BAA2F,0BAAYA,WAAW,KAAvB,0BAA3F,cAA4K,0BAAYA,WAAW,KAAvB,WAA5K,uBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8LAUL,iBAAQ,CACN,GAAM,QADR,SAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wDADQ,kCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+EADQ,sDAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oEADQ,iDAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qFADQ,iCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kJADQ,yD,wNAQ1BJ,EAAWK,gBAAiB","file":"component---src-http-headers-dont-sniff-mimetype-mdx-e60ff8c8c93d0d20866a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ulisesgascon/Desktop/WORKSPACE/GS-Projects/cybersecurity-handbook/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"http-header-dont-sniff-mimetype\"\n    }}>{`HTTP Header: Don't Sniff Mimetype`}</h1>\n    <h2 {...{\n      \"id\": \"the-attack\"\n    }}>{`The attack`}</h2>\n    <p>{`MIME types are a way of determining what kind of file you’re looking at. PNG images have the type `}<inlineCode parentName=\"p\">{`image/png`}</inlineCode>{`; JSON files are `}<inlineCode parentName=\"p\">{`application/json`}</inlineCode>{`; JavaScript files are typically `}<inlineCode parentName=\"p\">{`text/javascript`}</inlineCode>{`. When your browser loads a file, it reads the server’s `}<inlineCode parentName=\"p\">{`Content-Type`}</inlineCode>{` header to determine what the thing is.`}</p>\n    <p>{`Let’s say that your browser sees this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<script src=\"https://example.com/my-javascript\"></script>\n`}</code></pre>\n    <p>{`It’ll go and load `}<inlineCode parentName=\"p\">{`my-javascript`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`example.com`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`example.com`}</inlineCode>{` sends a `}<inlineCode parentName=\"p\">{`Content-Type`}</inlineCode>{` header of `}<inlineCode parentName=\"p\">{`text/javascript`}</inlineCode>{`, your browser will execute the contents of `}<inlineCode parentName=\"p\">{`my-javascript`}</inlineCode>{` as JavaScript.`}</p>\n    <p>{`But what if `}<inlineCode parentName=\"p\">{`my-javascript`}</inlineCode>{` is an HTML page with a `}<inlineCode parentName=\"p\">{`Content-Type`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`text/html`}</inlineCode>{`? If your browser does something called “MIME sniffing” (which some do), it will look at the contents of the file, decide if it looks like JavaScript, and execute it if so. This means that a server can send the wrong `}<inlineCode parentName=\"p\">{`Content-Type`}</inlineCode>{` and JavaScript can still get executed.`}</p>\n    <p>{`This MIME sniffing can be an attack vector. A user could upload an image with the `}<inlineCode parentName=\"p\">{`.jpg`}</inlineCode>{` file extension but its contents are actually HTML. Visiting that image could cause the browser to “run” the HTML page, which could contain malicious JavaScript! Perhaps the nastiest attack is called `}<a parentName=\"p\" {...{\n        \"href\": \"https://miki.it/blog/2014/7/8/abusing-jsonp-with-rosetta-flash/\"\n      }}>{`Rosetta Flash`}</a>{`, which allows someone to load a malicious Flash plugin instead of data!`}</p>\n    <h2 {...{\n      \"id\": \"the-header\"\n    }}>{`The header`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`X-Content-Type-Options`}</inlineCode>{` header tells browsers not to sniff MIME types. When this header is set to `}<inlineCode parentName=\"p\">{`nosniff`}</inlineCode>{`, browsers won’t sniff the MIME type—they will trust what the server says and block the resource if it’s wrong.`}</p>\n    <h2 {...{\n      \"id\": \"the-code\"\n    }}>{`The code`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`noSniff`}</inlineCode>{` middleware will set the `}<inlineCode parentName=\"p\">{`X-Content-Type-Options`}</inlineCode>{` header to `}<inlineCode parentName=\"p\">{`nosniff`}</inlineCode>{` for every request.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const helmet = require('helmet')\n\n//By default: Sets \"X-Content-Type-Options: nosniff\".\napp.use(helmet())\n\n// Sets \"X-Content-Type-Options: nosniff\".\napp.use(helmet.noSniff())\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"refs\"\n    }}>{`Refs:`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://helmetjs.github.io/docs/dont-sniff-mimetype\"\n        }}>{`Helmet | Don't Sniff Mimetype`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://blog.fox-it.com/2012/05/08/mime-sniffing-feature-or-vulnerability/\"\n        }}>{`Fox it | MIME Sniffing: feature or vulnerability?`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://blog.miki.it/2014/7/8/abusing-jsonp-with-rosetta-flash/\"\n        }}>{`Miki Blog | Abusing JSONP with Rosetta Flash`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\"\n        }}>{`MDN | X-Content-Type-Options`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)?redirectedfrom=MSDN\"\n        }}>{`Microsoft | Reducing MIME type security risks`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}