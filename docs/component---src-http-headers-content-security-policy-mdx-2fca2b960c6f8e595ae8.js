(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{Pzgv:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return l}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var o=n("/FXl"),a=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/http_headers/content_security_policy.mdx"}});var s={_frontmatter:r},c=a.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(o.b)(c,i({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"http-header-content-security-policy"},"HTTP Header: Content Security Policy"),Object(o.b)("h2",{id:"the-attack"},"The attack"),Object(o.b)("p",null,"There isn’t one specific attack the CSP module prevents. The main thing is this: you don’t want anyone putting anything on your webpages that you don’t expect."),Object(o.b)("p",null,"The nastiest attack is probably cross-site scripting (XSS), which is when a hacker puts malicious JavaScript onto your page. If I can run JavaScript on your page, I can do a lot of bad things, from stealing authentication cookies to logging every user action."),Object(o.b)("p",null,"There are other things attackers can do, even if they can’t execute JavaScript. For example, if I could put a tiny, transparent 1x1 image on your site, I could get a pretty good idea of how much traffic your site gets. If I could get a ",Object(o.b)("a",i({parentName:"p"},{href:"http://arstechnica.com/security/2015/07/two-new-flash-exploits-surface-from-hacking-team-combine-with-java-0-day/"}),"vulnerable browser plugin")," like Flash to run, I could exploit its flaws and do things you don’t want!"),Object(o.b)("p",null,"One of the tricky things about these injection attacks is the browser doesn’t know what’s good and what’s bad. How can it tell the difference between a legitimate JavaScript file and a malicious one? In many cases, it can’t…unless you’ve defined a Content Security Policy."),Object(o.b)("p",null,"Most modern browsers support a header called ",Object(o.b)("inlineCode",{parentName:"p"},"Content-Security-Policy"),", which is effectively a whitelist of things allowed to be on your page. You can whitelist JavaScript, CSS, images, plugins, and much more. Things are opt-in, so you’re saying “this stuff is allowed” instead of “this stuff is not allowed”."),Object(o.b)("h2",{id:"the-header"},"The header"),Object(o.b)("p",null,"Let’s say you’ve got a website that links to no external resources at all, just your stuff. You could set a header that looks like this:"),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{}),"Content-Security-Policy: default-src 'self'\n")),Object(o.b)("p",null,"This effectively tells the browser “only load things from my own domain”. If you’re running example.com and a user tries to load ",Object(o.b)("inlineCode",{parentName:"p"},"https://example.com/my-javascript.js"),", it’ll work just fine. But if a user tries to load ",Object(o.b)("inlineCode",{parentName:"p"},"http://evil.com/evil.js"),", it won’t load at all!"),Object(o.b)("p",null,"Now, let’s say you want to also allow CSS from Bootstrap’s CDN. You could set a CSP that looks like this:"),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{}),"Content-Security-Policy: default-src 'self'; style-src 'self' maxcdn.bootstrapcdn.com\n")),Object(o.b)("p",null,"Now we’ve whitelisted ",Object(o.b)("inlineCode",{parentName:"p"},"'self'")," and ",Object(o.b)("inlineCode",{parentName:"p"},"maxcdn.bootstrapcdn.com"),". The user will be able to load CSS from there, but nothing else. The user won’t even be able to load JavaScript or images from that URL, either—only stylesheets."),Object(o.b)("p",null,"As an example here is the CSP used by Github:"),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{}),"default-src 'none'; \nbase-uri 'self'; \nblock-all-mixed-content; \nconnect-src 'self' uploads.github.com www.githubstatus.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com wss://live.github.com;\nfont-src github.githubassets.com; \nform-action 'self' github.com gist.github.com;\nframe-ancestors 'none';\nframe-src render.githubusercontent.com;\nimg-src 'self' data: github.githubassets.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com customer-stories-feed.github.com; \nmanifest-src 'self'; \nmedia-src 'none'; script-src github.githubassets.com; \nstyle-src 'unsafe-inline' github.githubassets.com\n")),Object(o.b)("h2",{id:"the-code"},"The code"),Object(o.b)("p",null,"Helmet’s csp module helps set Content Security Policies."),Object(o.b)("p",null,"Directives can be kebab-cased (like ",Object(o.b)("inlineCode",{parentName:"p"},"script-src"),") or camel-cased (like ",Object(o.b)("inlineCode",{parentName:"p"},"scriptSrc"),"); they are equivalent."),Object(o.b)("h4",{id:"directives"},"Directives"),Object(o.b)("p",null,"There are a lot of inconsistencies in how browsers implement CSP. Helmet looks at the user-agent of the browser and sets the appropriate header and value for that browser. If no user-agent is matched, it will set all the headers with the 2.0 spec."),Object(o.b)("p",null,"Check out the ",Object(o.b)("a",i({parentName:"p"},{href:"https://github.com/helmetjs/csp#supported-directives"}),"supported directives")),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy({\n  directives: {\n    defaultSrc: [\"'self'\", 'default.com'],\n    scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n    sandbox: ['allow-forms', 'allow-scripts'],\n    reportUri: '/report-violation',\n    objectSrc: [\"'none'\"],\n    //...\n    upgradeInsecureRequests: true,\n    workerSrc: false\n  }\n}))\n")),Object(o.b)("h4",{id:"csp-violations"},"CSP violations"),Object(o.b)("p",null,"If you’ve specified a reportUri, browsers will POST any CSP violations to your server."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy({\n  directives: {\n    reportUri: '/report-violation',\n    //...\n  }\n}))\n")),Object(o.b)("h3",{id:"report-only-mode"},"Report Only mode"),Object(o.b)("p",null,"This modules reportOnly option will switch the header to Content-Security-Policy-Report-Only. This instructs browsers to report violations to the reportUri (if specified) but it will not block any resources from loading."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy(csp({\n  directives: {\n    // ...\n  },\n  reportOnly: true\n})\n")),Object(o.b)("h4",{id:"set-all-headers"},"set all headers"),Object(o.b)("p",null,"To set all headers, including legacy ones, set the ",Object(o.b)("inlineCode",{parentName:"p"},"setAllHeaders")," option to true. Note that this will change the value of the headers based on ",Object(o.b)("inlineCode",{parentName:"p"},"User-Agent"),". You can disable this by using the ",Object(o.b)("inlineCode",{parentName:"p"},"browserSniff: false")," option above."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy(csp({\n  directives: {\n    // ...\n  },\n  setAllHeaders: true\n})\n")),Object(o.b)("h4",{id:"loose-mode"},"loose mode"),Object(o.b)("p",null,'This module will detect common mistakes in your directives and throw errors if it finds any. To disable this, enable "loose mode".'),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy(csp({\n  directives: {\n    // ...\n  },\n  loose: false\n})\n")),Object(o.b)("h4",{id:"disable-for-android"},"Disable for Android"),Object(o.b)("p",null,"Old Android browsers can be very buggy. This is false by default."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy(csp({\n  directives: {\n    // ...\n  },\n  disableAndroid: true\n})\n")),Object(o.b)("h4",{id:"browser-sniffing"},"Browser sniffing"),Object(o.b)("p",null,"By default, this module will look at the incoming ",Object(o.b)("inlineCode",{parentName:"p"},"User-Agent")," header and send different headers depending on the detected browser. For example, Chrome prior to version 25 uses an alternate header called ",Object(o.b)("inlineCode",{parentName:"p"},"X-WebKit-CSP"),", and this module handles that. If no browser is detected, this module will set all the headers with the 2.0 spec."),Object(o.b)("p",null,"To disable this browser sniffing and assume a modern browser, set the ",Object(o.b)("inlineCode",{parentName:"p"},"browserSniff")," option to ",Object(o.b)("inlineCode",{parentName:"p"},"false"),"."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"const helmet = require('helmet')\n\napp.use(helmet.contentSecurityPolicy(csp({\n  directives: {\n    // ...\n  },\n  browserSniff: false\n})\n")),Object(o.b)("h2",{id:"advance-csp"},"Advance CSP"),Object(o.b)("h3",{id:"generating-nounces"},"Generating Nounces"),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"const uuidv4 = require('uuid/v4')\n\napp.use(function (req, res, next) {\n  res.locals.nonce = uuidv4()\n  next()\n})\n\napp.use(csp({\n  directives: {\n    scriptSrc: [\n      \"'self'\",\n      (req, res) => `'nonce-${res.locals.nonce}'`  // 'nonce-614d9122-d5b0-4760-aecf-3a5d17cf0ac9'\n    ]\n  }\n}))\n\napp.use(function (req, res) {\n  res.end(`<script nonce=\"${res.locals.nonce}\">alert(1 + 1);<\/script>`)\n})\n")),Object(o.b)("h3",{id:"debugging-mode"},"Debugging mode"),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{}),"app.use(csp({\n  directives: {\n    // ...\n  },\n  reportOnly: (req, res) => req.query.cspmode === 'debug'\n})\n")),Object(o.b)("h3",{id:"refs"},"Refs:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",i({parentName:"li"},{href:"https://helmetjs.github.io/docs/csp"}),"Helmet | Content Security Policy")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",i({parentName:"li"},{href:"https://developers.google.com/web/fundamentals/security/csp"}),"Google developers | Content Security Policy")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",i({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Cross-site_scripting"}),"Wikipedia | Cross-site scripting")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",i({parentName:"li"},{href:"https://caniuse.com/#feat=contentsecuritypolicy"}),"Can I use | Content Security Policy 1.0")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",i({parentName:"li"},{href:"https://caniuse.com/#feat=contentsecuritypolicy2"}),"Can I use | Content Security Policy 2.0")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",i({parentName:"li"},{href:"https://content-security-policy.com/"}),"Content Security Policy Reference")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",i({parentName:"li"},{href:"https://content-security-policy.com/browser-test/"}),"Content Security Policy Browser Test")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=d0D3d0ZM-rI"}),"📺 dotSecurity 2016 | Scott Helme | Content Security Policy: The application security Swiss Army Knife")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=mr230uotw-Y"}),"📺 GOTO 2018 | Matt Brunt | Content Security Policies: Let's Break Stuff"))))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/http_headers/content_security_policy.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-http-headers-content-security-policy-mdx-2fca2b960c6f8e595ae8.js.map