{"version":3,"sources":["webpack:///../src/proactive_controls/c5_validate_all_inputs.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,mOAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,qBAAG,kBAAIC,WAAW,KAAf,mCAAuD,mBAAGA,WAAW,MAAS,CAC3E,KAAQ,oEAD4C,mBAG1D,iBAAQ,CACN,GAAM,0BADR,2BAGA,iBAAQ,CACN,GAAM,eADR,eAGA,sJAEA,iBAAQ,CACN,GAAM,gCADR,gCAGA,mMAEA,qBAAG,sBAAQA,WAAW,KAAnB,mBAAH,yaAKA,qBAAG,sBAAQA,WAAW,KAAnB,qBAAH,4MAGA,iBAAQ,CACN,GAAM,kBADR,kBAGA,iBAAQ,CACN,GAAM,gCADR,gCAGA,kJAEA,sBACE,kBAAIA,WAAW,MAAf,8LAEW,0BAAYA,WAAW,MAAvB,YAFX,qIAIA,kBAAIA,WAAW,MAAf,iuBAUF,iBAAQ,CACN,GAAM,0CADR,0CAGA,6hBAMA,iBAAQ,CACN,GAAM,uBADR,uBAGA,6IAEA,mHACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,wBAEL,0LAEA,iBAAQ,CACN,GAAM,2CADR,4CAGA,yIACkB,mBAAGA,WAAW,KAAQ,CACpC,KAAQ,6BADM,4CADlB,6FAKA,iBAAQ,CACN,GAAM,sBADR,uBAGA,qTAIA,iBAAQ,CACN,GAAM,8BADR,8BAGA,+YAIA,iBAAQ,CACN,GAAM,4CADR,4CAGA,6fAMA,gIAEA,sBACE,kBAAIA,WAAW,MAAf,6HAEA,kBAAIA,WAAW,MAAf,+LAGA,kBAAIA,WAAW,MAAf,wHAEA,kBAAIA,WAAW,MAAf,8JAEA,kBAAIA,WAAW,MAAf,gHAEA,kBAAIA,WAAW,MAAf,yEAEF,iBAAQ,CACN,GAAM,yCADR,2CAGA,gZAKA,yHAEA,2YAIA,mEACA,sBACE,kBAAIA,WAAW,MAAf,8EACA,kBAAIA,WAAW,MAAf,kIAGF,2DAA0C,mBAAGA,WAAW,KAAQ,CAC5D,KAAQ,oFAD8B,sCAG1C,iBAAQ,CACN,GAAM,kCADR,kCAGA,sPAGA,sBACE,kBAAIA,WAAW,MAAf,yFAEA,kBAAIA,WAAW,MAAf,8LAGJ,mBAAGA,WAAW,MAAS,CACf,KAAQ,oGADhB,mDAHI,gDAOF,iBAAQ,CACN,GAAM,wDADR,wDAGA,ihBAI2C,mBAAGA,WAAW,KAAQ,CAC7D,KAAQ,wCAD+B,cAG3C,iBAAQ,CACN,GAAM,6BADR,6BAGA,sBACE,kBAAIA,WAAW,MAAf,sIAEA,kBAAIA,WAAW,MAAf,4KAEA,kBAAIA,WAAW,MAAf,mHAGF,iBAAQ,CACN,GAAM,wBADR,wBAGA,iBAAQ,CACN,GAAM,0CADR,0CAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wBADQ,sBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uCADQ,wCAItB,iBAAQ,CACN,GAAM,iDADR,iDAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kFADQ,mC,iOAQ1BJ,EAAWK,gBAAiB","file":"component---src-proactive-controls-c-5-validate-all-inputs-mdx-9897cfac174461bab434.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ulisesgascon/Desktop/WORKSPACE/GS-Projects/cybersecurity-handbook/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><em parentName=\"p\">{`ℹ️ This section will be part of `}<a parentName=\"em\" {...{\n          \"href\": \"https://github.com/guidesmiths/cybersecurity-handbook/issues/41\"\n        }}>{`1.0.0 Release`}</a></em></p>\n    <h1 {...{\n      \"id\": \"c5-validate-all-inputs\"\n    }}>{`C5: Validate All Inputs`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`Input validation is a programming technique that ensures only properly formatted data may\nenter a software system component.`}</p>\n    <h3 {...{\n      \"id\": \"syntax-and-semantic-validity\"\n    }}>{`Syntax and Semantic Validity`}</h3>\n    <p>{`An application should check that data is both syntactically and semantically valid (in that\norder) before using it in any way (including displaying it back to the user).`}</p>\n    <p><strong parentName=\"p\">{`Syntax validity`}</strong>{` means that the data is in the form that is expected. For example, an application\nmay allow a user to select a four-digit “account ID” to perform some kind of operation. The\napplication should assume the user is entering a SQL injection payload, and should check that\nthe data entered by the user is exactly four digits in length, and consists only of numbers (in\naddition to utilizing proper query parameterization).`}</p>\n    <p><strong parentName=\"p\">{`Semantic validity`}</strong>{` includes only accepting input that is within an acceptable range for the given\napplication functionality and context. For example, a start date must be before an end date\nwhen choosing date ranges.`}</p>\n    <h2 {...{\n      \"id\": \"implementation\"\n    }}>{`Implementation`}</h2>\n    <h3 {...{\n      \"id\": \"whitelisting-vs-blacklisting\"\n    }}>{`Whitelisting vs Blacklisting`}</h3>\n    <p>{`There are two general approaches to performing input syntax validation, commonly known as\nblacklisting and whitelisting:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Blacklisting or blacklist validation attempts to check that given data does not contain\n“known bad” content. For example, a web application may block input that contains\nthe exact text `}<inlineCode parentName=\"li\">{`<SCRIPT>`}</inlineCode>{` in order to help prevent XSS. However, this defense could\nbe evaded with a lower case script tag or a script tag of mixed case.`}</li>\n      <li parentName=\"ul\">{`Whitelisting or whitelist validation attempts to check that a given data matches a set\nof “known good” rules. For example a whitelist validation rule for a US state would be\na 2-letter code that is only one of the valid US states.\nWhen building secure software, whitelisting is the recommended minimal approach.\nBlacklisting is prone to error and can be bypassed with various evasion techniques and can be\ndangerous when depended on by itself. Even though blacklisting can often be evaded it can\noften useful to help detect obvious attacks. So while whitelisting helps limit the attack surface\nby ensuring data is of the right syntactic and semantic validity, blacklisting helps detect and\npotentially stop obvious attacks. `}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"client-side-and-server-side-validation\"\n    }}>{`Client side and Server side Validation`}</h3>\n    <p>{`Input validation must always be done on the server-side for security. While client side\nvalidation can be useful for both functional and some security purposes it can often be easily\nbypassed. This makes server-side validation even more fundamental to security. For example,\nJavaScript validation may alert the user that a particular field must consist of numbers but the\nserver side application must validate that the submitted data only consists of numbers in the\nappropriate numerical range for that feature.`}</p>\n    <h3 {...{\n      \"id\": \"regular-expressions\"\n    }}>{`Regular Expressions`}</h3>\n    <p>{`Regular expressions offer a way to check whether data matches a specific pattern. Let’s start\nwith a basic example.`}</p>\n    <p>{`The following regular expression is used to define a whitelist rule to validate usernames.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`^[a-z0-9_]{3,16}$\n`}</code></pre>\n    <p>{`This regular expression allows only lowercase letters, numbers and the underscore character.\nThe username is also restricted to a length of 3 and 16 characters.`}</p>\n    <h4 {...{\n      \"id\": \"caution-potential-for-denial-of-service\"\n    }}>{`Caution: Potential for Denial of Service`}</h4>\n    <p>{`Care should be exercised when creating regular expressions. Poorly designed expressions may\nresult in potential `}<a parentName=\"p\" {...{\n        \"href\": \"/attacks_explained/redos\"\n      }}>{`denial of service conditions (aka ReDoS)`}</a>{`. Various tools can test to verify that\nregular expressions are not vulnerable to ReDoS.`}</p>\n    <h4 {...{\n      \"id\": \"caution-complexity\"\n    }}>{`Caution: Complexity`}</h4>\n    <p>{`Regular expressions are just one way to accomplish validation. Regular expressions can be\ndifficult to maintain or understand for some developers. Other validation alternatives involve\nwriting validation methods programmatically which can be easier to maintain for some\ndevelopers.`}</p>\n    <h3 {...{\n      \"id\": \"limits-of-input-validation\"\n    }}>{`Limits of Input Validation`}</h3>\n    <p>{`Input validation does not always make data “safe” since certain forms of complex input may\nbe \"valid\" but still dangerous. For example a valid email address may contain a SQL injection\nattack or a valid URL may contain a Cross Site Scripting attack. Additional defenses besides\ninput validation should always be applied to data such as query parameterization or escaping.`}</p>\n    <h3 {...{\n      \"id\": \"challenges-of-validating-serialized-data\"\n    }}>{`Challenges of Validating Serialized Data`}</h3>\n    <p>{`Some forms of input are so complex that validation can only minimally protect the\napplication. For example, it's dangerous to deserialize untrusted data or data that can be\nmanipulated by an attacker. The only safe architectural pattern is to not accept serialized\nobjects from untrusted sources or to only deserialize in limited capacity for only simple data\ntypes. You should avoid processing serialized data formats and use easier to defend formats\nsuch as JSON when possible.`}</p>\n    <p>{`If that is not possible then consider a series of validation defenses when processing serialized\ndata.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Implement integrity checks or encryption of the serialized objects to prevent hostile\nobject creation or data tampering.`}</li>\n      <li parentName=\"ul\">{`Enforce strict type constraints during deserialization before object creation; typically\ncode is expecting a definable set of classes. Bypasses to this technique have been\ndemonstrated.`}</li>\n      <li parentName=\"ul\">{`Isolate code that deserializes, such that it runs in very low privilege environments,\nsuch as temporary containers.`}</li>\n      <li parentName=\"ul\">{`Log security deserialization exceptions and failures, such as where the incoming type is\nnot the expected type, or the deserialization throws exceptions.`}</li>\n      <li parentName=\"ul\">{`Restrict or monitor incoming and outgoing network connectivity from containers or\nservers that deserialize.`}</li>\n      <li parentName=\"ul\">{`Monitor deserialization, alerting if a user deserializes constantly.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"unexpected-user-input-mass-assignment\"\n    }}>{`Unexpected User Input (Mass Assignment)`}</h3>\n    <p>{`Some frameworks support automatic binding of HTTP requests parameters to server-side\nobjects used by the application. This auto-binding feature can allow an attacker to update\nserver-side objects that were not meant to be modified. The attacker can possibly modify\ntheir access control level or circumvent the intended business logic of the application with\nthis feature.`}</p>\n    <p>{`This attack has a number of names including: mass assignment, autobinding and object\ninjection.`}</p>\n    <p>{`As a simple example, if the user object has a field privilege which specifies the user's privilege\nlevel in the application, a malicious user can look for pages where user data is modified and\nadd privilege=admin to the HTTP parameters sent. If auto-binding is enabled in an insecure\nfashion, the server-side object representing the user will be modified accordingly.`}</p>\n    <p>{`Two approaches can be used to handle this:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Avoid binding input directly and use Data Transfer Objects (DTOs) instead.`}</li>\n      <li parentName=\"ul\">{`Enable auto-binding but set up whitelist rules for each page or feature to define which\nfields are allowed to be auto-bound.`}</li>\n    </ul>\n    <p>{`More examples are available in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html\"\n      }}>{`OWASP Mass Assignment Cheat Sheet`}</a></p>\n    <h3 {...{\n      \"id\": \"validating-and-sanitizing-html\"\n    }}>{`Validating and Sanitizing HTML`}</h3>\n    <p>{`Consider an application that needs to accept HTML from users (via a WYSIWYG editor that\nrepresents content as HTML or features that directly accept HTML in input). In this situation\nvalidation or escaping will not help.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Regular expressions are not expressive enough to understand the complexity of\nHTML5.`}</li>\n      <li parentName=\"ul\">{`Encoding or escaping HTML will not help since it will cause the HTML to not render\nproperly.\nTherefore, you need a library that can parse and clean HTML formatted text. Please see the\n`}<a parentName=\"li\" {...{\n          \"href\": \"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"\n        }}>{`XSS Prevention Cheat Sheet on HTML Sanitization`}</a>{` for more information on HTML Sanitization.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"validation-functionality-in-libraries-and-frameworks\"\n    }}>{`Validation Functionality in Libraries and Frameworks`}</h3>\n    <p>{`All languages and most frameworks provide validation libraries or functions which should be\nleveraged to validate data. Validation libraries typically cover common data types, length requirements, integer ranges, \"is null\" checks and more. Many validation libraries and\nframeworks allow you to define your own regular expression or logic for custom validation in\na way that allows the programmer to leverage that functionality throughout your application.\nExamples of validation functionality include `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cure53/DOMPurify\"\n      }}>{`DOMPurify`}</a></p>\n    <h2 {...{\n      \"id\": \"vulnerabilities-prevented\"\n    }}>{`Vulnerabilities Prevented`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Input validation reduces the attack surface of applications and can sometimes make\nattacks more difficult against an application.`}</li>\n      <li parentName=\"ul\">{`Input validation is a technique that provides security to certain forms of data, specific\nto certain attacks and cannot be reliably applied as a general security rule.`}</li>\n      <li parentName=\"ul\">{`Input validation should not be used as the primary method of preventing XSS, SQL\nInjection and other attacks.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"specific-mitigations\"\n    }}>{`Specific Mitigations`}</h2>\n    <h3 {...{\n      \"id\": \"owasp-top-10-vulnerabilities-mitigated\"\n    }}>{`OWASP Top 10 Vulnerabilities Mitigated`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/owasp/a1_injection\"\n        }}>{`A1:2017-Injection`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/owasp/a7_cross-site_scripting_xss\"\n        }}>{`A7:2017-Cross-Site Scripting (XSS)`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"owasp-mobile-top-10-vulnerabilities-mitigated\"\n    }}>{`OWASP Mobile Top 10 Vulnerabilities Mitigated`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://owasp.org/www-project-mobile-top-10/2016-risks/m7-client-code-quality\"\n        }}>{`M7: Client Code Quality`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}